{
  "memories": [
    {
      "id": "mem_1755123804085_60ru4skls",
      "content": "PhotoCapture.test.tsx has React Native component casing issues. The vitest.config.ts already aliases 'react-native' to 'react-native-web', but the test/mocks/react-native.ts file is mocking components as strings which causes them to render as lowercase HTML elements. Need to update the mock to use proper React components instead of strings, and add missing ActivityIndicator component.",
      "type": "config",
      "tags": [
        "config",
        "react",
        "testing",
        "react-native",
        "mocks",
        "vitest"
      ],
      "timestamp": "2025-08-13T22:23:24.078Z",
      "context": "Fixing test failures in PhotoCapture.test.tsx",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:23:24.078Z",
      "lastVerified": "2025-08-13T22:23:24.078Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124046352_qhzrj5cgf",
      "content": "Fixed React Native component casing issues in PhotoCapture.test.tsx by updating the /test/mocks/react-native.ts mock file. Changed from mocking components as strings (e.g., 'View', 'Text') to proper React components that render as DOM elements:\n- View/SafeAreaView → render as div elements\n- Text → renders as span element\n- TouchableOpacity/TouchableHighlight/TouchableWithoutFeedback → render as button elements\n- Added missing ActivityIndicator component mock\n- All components now properly handle testID, disabled, onPress/onClick props\nThis ensures React Testing Library can properly interact with the components in tests.",
      "type": "solution",
      "tags": [
        "solution",
        "react",
        "testing",
        "react-native",
        "mocks"
      ],
      "timestamp": "2025-08-13T22:27:26.352Z",
      "context": "Fixed PhotoCapture test failures due to React Native component rendering",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:27:26.352Z",
      "lastVerified": "2025-08-13T22:27:26.352Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124216157_rtd2sb0z0",
      "content": "InstantDBClient test failure issue: The tests fail with \"Cannot read properties of undefined (reading 'appId')\" because the singleton instance (export const instantDB = new InstantDBClient()) at the bottom of instantdb-client.ts is created immediately when the module loads, before tests can set up environment variables. The singleton creation happens before beforeEach() runs, so VITE_INSTANTDB_APP_ID is undefined.",
      "type": "config",
      "tags": [
        "config",
        "testing",
        "instantdb",
        "singleton",
        "environment-variables"
      ],
      "timestamp": "2025-08-13T22:30:16.156Z",
      "context": "Debugging InstantDBClient test failures in 90-hard project",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:30:16.156Z",
      "lastVerified": "2025-08-13T22:30:16.156Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124377323_w6trev1br",
      "content": "Fixed InstantDBClient test failures by removing the singleton export (export const instantDB = new InstantDBClient()) from instantdb-client.ts. The issue was that the singleton was being instantiated when the module loaded, before tests could set up the VITE_INSTANTDB_APP_ID environment variable. Tests now create their own instances after setting up the environment.",
      "type": "config",
      "tags": [
        "config",
        "testing",
        "instantdb",
        "singleton",
        "fix",
        "solution"
      ],
      "timestamp": "2025-08-13T22:32:57.322Z",
      "context": "Solution for InstantDBClient test failures in 90-hard project",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:32:57.322Z",
      "lastVerified": "2025-08-13T22:32:57.322Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124553768_c7z2tecrl",
      "content": "Test failure in schemas.test.ts: The test \"Supports custom error messages for each validation step\" is failing because the expected ZodError format doesn't match the actual error. The test expects to throw a ZodError object with specific structure, but the actual error might have a different format.",
      "type": "error",
      "tags": [
        "error"
      ],
      "timestamp": "2025-08-13T22:35:53.765Z",
      "context": "Fixing failing test in /Volumes/Main SSD/CascadeProjects/90-hard/packages/@green-stack-core/schemas/tests/schemas.test.ts",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:35:53.765Z",
      "lastVerified": "2025-08-13T22:35:53.765Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124757156_dp148qhlw",
      "content": "Fixed the failing test \"Supports custom error messages for each validation step\" in schemas.test.ts. The issue was that vitest's toThrow() matcher doesn't do deep equality checking on error objects when passed an instance. The fix was to:\n1. Use toThrow(ZodError) to check error type instead of comparing the full error object\n2. Use try-catch blocks to verify the error structure by checking the error.issues property directly\n3. Keep the custom error message checks as they were (toThrow with string works fine)",
      "type": "troubleshooting",
      "tags": [
        "troubleshooting"
      ],
      "timestamp": "2025-08-13T22:39:17.148Z",
      "context": "Test fix for ZodError validation in vitest",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:39:17.148Z",
      "lastVerified": "2025-08-13T22:39:17.148Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755124860667_16v9ifkvq",
      "content": "The useFormState tests in @green-stack-core are failing with \"document is not defined\" because:\n1. They're React hook tests that need DOM environment\n2. The package has a Bun test setup (preload.test.ts) but we're running with Vitest\n3. The main vitest.config.ts uses happy-dom but these specific tests aren't getting that environment\n4. The tests use renderHook from @testing-library/react which requires DOM",
      "type": "config",
      "tags": [
        "config",
        "react",
        "testing",
        "vitest",
        "dom-environment",
        "useFormState"
      ],
      "timestamp": "2025-08-13T22:41:00.665Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T22:41:00.665Z",
      "lastVerified": "2025-08-13T22:41:00.665Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755127879884_dxwwo4dtb",
      "content": "When running vitest from apps/expo directory, it's using workspace configuration and not finding tests in packages directory. The workspace config is deprecated. Need to either:\n1. Run tests from root directory\n2. Update vitest config to use test.projects instead of workspace\n3. Use direct vitest command with full path from root",
      "type": "config",
      "tags": [
        "config",
        "vitest",
        "workspace",
        "testing",
        "path-issues"
      ],
      "timestamp": "2025-08-13T23:31:19.883Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T23:31:19.883Z",
      "lastVerified": "2025-08-13T23:31:19.883Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755129328407_xkjogz6n7",
      "content": "Fixed useFormState tests failing with \"document is not defined\" by:\n1. Added @vitest-environment happy-dom comment to the test file\n2. Updated vitest.workspace.ts to use happy-dom environment for packages (was using 'node')\n3. The tests should now have DOM available when running with vitest\n\nThe issue was that React Testing Library's renderHook requires DOM environment but the packages workspace was configured with environment: 'node'",
      "type": "tip",
      "tags": [
        "tip",
        "react",
        "testing",
        "vitest",
        "dom-environment",
        "solution",
        "useFormState"
      ],
      "timestamp": "2025-08-13T23:55:28.406Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-13T23:55:28.406Z",
      "lastVerified": "2025-08-13T23:55:28.406Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755130671787_btymerzae",
      "content": "Found failing test in export.service.test.ts - \"should generate unique filenames with proper format\" test is failing because it expects filenames to match a specific date format pattern but the generateFilename method uses Date.now() which changes between calls. Need to mock Date to fix this test.",
      "type": "tip",
      "tags": [
        "tip",
        "testing",
        "90-hard",
        "export-service",
        "date-mocking"
      ],
      "timestamp": "2025-08-14T00:17:51.787Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-14T00:17:51.787Z",
      "lastVerified": "2025-08-14T00:17:51.787Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755130801921_r67wzky4q",
      "content": "Fixed failing test in export.service.test.ts by mocking Date with vi.useFakeTimers() and vi.setSystemTime(). The test was failing because generateFilename() uses Date.now() to create unique filenames with milliseconds, but the test was comparing filenames generated at different times. Solution: mock the date, generate first filename, advance timer by 1ms, generate second filename, then restore real timers. Also updated regex pattern to include milliseconds: /^90hard_analytics_user-123_30D_\\d{8}_\\d{6}_\\d{3}\\.csv$/",
      "type": "code",
      "tags": [
        "code",
        "testing",
        "90-hard",
        "export-service",
        "date-mocking",
        "solution"
      ],
      "timestamp": "2025-08-14T00:20:01.920Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-14T00:20:01.920Z",
      "lastVerified": "2025-08-14T00:20:01.920Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755134754378_qhavi1bqf",
      "content": "Fixed failing test in bridges.test.ts by correcting import paths:\n\n1. Original error: \"Failed to resolve import '@green-stack/schemas/bridgedFetcher'\" \n2. Root cause: Multiple files were using incorrect import paths for @green-stack/schemas when the actual package is @green-stack/core\n\nFixed imports in:\n- features/@app-core/resolvers/healthCheck.query.ts: Changed from '@green-stack/schemas' to '@green-stack/core/schemas/bridgedFetcher'\n- features/@app-core/resolvers/healthCheck.bridge.ts: Changed from '@green-stack/schemas/createDataBridge' to '@green-stack/core/schemas/createDataBridge'\n- features/@app-core/schemas/HealthCheckInput.ts: Changed from '@green-stack/schemas' to '@green-stack/core/schemas'\n- features/@app-core/schemas/HealthCheckOutput.ts: Changed from '@green-stack/schemas' to '@green-stack/core/schemas'\n- packages/@green-stack-core/schemas/tests/bridges.test.ts: Changed import path from '@app/core/resolvers/healthCheck.query' to '../../../../features/@app-core/resolvers/healthCheck.query'\n\nThe test \"Bridges created by createDataBridge can use a custom graphql query\" now passes along with all other tests in the file.",
      "type": "code",
      "tags": [
        "code",
        "bug-fix",
        "test-fix",
        "import-resolution",
        "bridges.test.ts"
      ],
      "timestamp": "2025-08-14T01:25:54.377Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-14T01:25:54.377Z",
      "lastVerified": "2025-08-14T01:25:54.377Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755135606161_xbuikb9jw",
      "content": "InstantDBClient test issue: The test file exists at /Volumes/Main SSD/CascadeProjects/90-hard/packages/infrastructure/src/instantdb/__tests__/instantdb-client.test.ts but Vitest workspace is not finding it. Fixed import paths (DayLog import changed from ../../../domain to ../../../../domain and ../../../domain to ../../../domain in implementation). Vitest workspace config shows packages workspace but no test files are being found despite proper include patterns. The workspace configuration appears to have an issue with the test discovery mechanism.",
      "type": "config",
      "tags": [
        "config",
        "instantdb",
        "vitest",
        "test-runner",
        "workspace-config",
        "test-discovery"
      ],
      "timestamp": "2025-08-14T01:40:06.161Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-14T01:40:06.161Z",
      "lastVerified": "2025-08-14T01:40:06.161Z",
      "status": "fresh"
    },
    {
      "id": "mem_1755137677875_bc3hxfiqu",
      "content": "InstantDBClient test fix completed successfully. Issues resolved: 1) Fixed import paths in test file (DayLog import from ../../../../domain/src/types) and implementation file (from ../../../domain/src/types). 2) Removed vitest workspace temporarily to use root config with proper __tests__ directory inclusion patterns. 3) All 8 InstantDBClient tests now pass: initialization (2 tests), authentication (3 tests), and transactional operations (3 tests). The tests verify environment variable validation, InstantDB initialization, magic code authentication, day log CRUD operations, and batch transactions.",
      "type": "config",
      "tags": [
        "config",
        "authentication",
        "instantdb",
        "test-fix",
        "vitest",
        "success",
        "imports",
        "transactions"
      ],
      "timestamp": "2025-08-14T02:14:37.875Z",
      "accessCount": 0,
      "lastAccessed": "2025-08-14T02:14:37.875Z",
      "lastVerified": "2025-08-14T02:14:37.875Z",
      "status": "fresh"
    }
  ],
  "lastUpdated": "2025-08-14T02:14:37.875Z"
}